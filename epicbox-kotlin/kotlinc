#!/usr/bin/env bash

# Based on scalac from the Scala distribution
# Copyright 2002-2011, LAMP/EPFL
# Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
# Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.

cygwin=false;
case "`uname`" in
    CYGWIN*) cygwin=true ;;
esac

# Based on findScalaHome() from scalac script
findKotlinHome() {
    local source="${BASH_SOURCE[0]}"
    while [ -h "$source" ] ; do
        local linked="$(readlink "$source")"
        local dir="$(cd -P $(dirname "$source") && cd -P $(dirname "$linked") && pwd)"
        source="$dir/$(basename "$linked")"
    done
    (cd -P "$(dirname "$source")/.." && pwd)
}

findJavaVersion() {
    echo $(echo $JAVA_VERSION | cut -d. -f1)
}

KOTLIN_HOME="$(findKotlinHome)"

if $cygwin; then
    # Remove spaces from KOTLIN_HOME on windows
    KOTLIN_HOME=`cygpath --windows --short-name "$KOTLIN_HOME"`
fi

# Set KOTLIN_COMPILER globally
KOTLIN_COMPILER=org.jetbrains.kotlin.cli.jvm.K2JVMCompiler

# JVM optimization parameters
JAVA_OPTS="\
-server \
-XX:+UseParallelGC \
-XX:+UseStringDeduplication \
-XX:+OptimizeStringConcat \
-XX:+UseCompressedOops \
-XX:+UseCompressedClassPointers \
-XX:+AlwaysPreTouch \
-Xverify:none \
-XX:+TieredCompilation \
-XX:TieredStopAtLevel=1 \
-XX:CICompilerCount=2 \
-XX:InitialRAMPercentage=70.0 \
-XX:MaxRAMPercentage=70.0"

# Parameters for serialization plugin
SERIALIZATION_PLUGIN="-Xplugin=/usr/lib/kotlinc/lib/kotlinx-serialization-compiler-plugin.jar"

# If KOTLIN_CLASSPATH is not defined, use an empty classpath
KOTLIN_CLASSPATH=${KOTLIN_CLASSPATH:-""}

declare -a java_args
declare -a kotlin_args

while [ $# -gt 0 ]; do
  case "$1" in
    -D*)
      java_args=("${java_args[@]}" "$1")
      shift
      ;;
    -J*)
      java_args=("${java_args[@]}" "${1:2}")
      shift
      ;;
    *)
      kotlin_args=("${kotlin_args[@]}" "$1")
      shift
      ;;
  esac
done

if [ -z "$JAVACMD" -a -n "$JAVA_HOME" -a -x "$JAVA_HOME/bin/java" ]; then
    JAVACMD="$JAVA_HOME/bin/java"
fi

java_version="$(findJavaVersion)"
if [[ $java_version -ge 9 ]]; then
    # Workaround the illegal reflective access warning from ReflectionUtil to ResourceBundle.setParent, see IDEA-248785.
    java_args=("${java_args[@]}" "--add-opens" "java.base/java.util=ALL-UNNAMED")
fi

# Directly run the compiler without preloader
"${JAVACMD:=java}" $JAVA_OPTS "${java_args[@]}" -cp "${KOTLIN_HOME}/lib/kotlin-compiler.jar" $KOTLIN_COMPILER $SERIALIZATION_PLUGIN -cp "$KOTLIN_CLASSPATH" "${kotlin_args[@]}"
